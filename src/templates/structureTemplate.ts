export interface StructureConfig {
  name: string;
  type: "next" | "react" | "node";
  features: string[];
  database?: string;
  auth?: string;
  styling?: string;
  testing?: boolean;
  linting?: boolean;
}

export interface DirectoryStructure {
  [key: string]: {
    type: "file" | "directory";
    content?: string;
    children?: DirectoryStructure;
  };
}

/**
 * Default structure configuration
 */
export function getDefaultStructureConfig(): StructureConfig {
  return {
    name: "my-app",
    type: "next",
    features: ["api", "pages", "components"],
    database: "prisma",
    auth: "next-auth",
    styling: "tailwind",
    testing: true,
    linting: true,
  };
}

/**
 * Get structure configuration based on options
 */
export function getStructureConfig(
  options: Partial<StructureConfig>
): StructureConfig {
  const defaultConfig = getDefaultStructureConfig();
  return { ...defaultConfig, ...options };
}

/**
 * Generate directory structure based on configuration
 */
export function generateDirectoryStructure(
  config: StructureConfig
): DirectoryStructure {
  const structure: DirectoryStructure = {
    src: {
      type: "directory",
      children: {
        components: {
          type: "directory",
          children: {
            ui: {
              type: "directory",
              children: {},
            },
          },
        },
        lib: {
          type: "directory",
          children: {},
        },
        types: {
          type: "directory",
          children: {},
        },
      },
    },
    public: {
      type: "directory",
      children: {},
    },
  };

  // Add Next.js specific structure
  if (config.type === "next") {
    structure["src"]["children"]!["app"] = {
      type: "directory",
      children: {
        "layout.tsx": {
          type: "file",
          content: generateNextLayoutTemplate(),
        },
        "page.tsx": {
          type: "file",
          content: generateNextPageTemplate(),
        },
        "globals.css": {
          type: "file",
          content: generateGlobalStylesTemplate(),
        },
      },
    };

    if (config.features.includes("api")) {
      structure["src"]["children"]!["app"]["children"]!["api"] = {
        type: "directory",
        children: {},
      };
    }
  }

  // Add database structure
  if (config.database === "prisma") {
    structure["prisma"] = {
      type: "directory",
      children: {
        "schema.prisma": {
          type: "file",
          content: generatePrismaSchemaTemplate(),
        },
      },
    };
  }

  // Add testing structure
  if (config.testing) {
    structure["__tests__"] = {
      type: "directory",
      children: {},
    };
  }

  return structure;
}

function generateNextLayoutTemplate(): string {
  return `import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`;
}

function generateNextPageTemplate(): string {
  return `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
      </div>
    </main>
  )
}`;
}

function generateGlobalStylesTemplate(): string {
  return `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`;
}

function generatePrismaSchemaTemplate(): string {
  return `// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}`;
}
